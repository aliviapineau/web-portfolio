function ButtonReveal() {
    console.log("ButtonReveal active. Set for " + buttonTime / 1e3 / 60);
    const myPlayer = videojs("myPlayerId");
    myPlayer.ready((function() {
        const buttonInterval = setInterval((function() {
            myPlayer.currentTime() > buttonTime / 1e3 && ($(".btn-hidden").css("display", "inherit"),
            $(".textPop").css("display", "inherit"),
            clearInterval(buttonInterval))
        }
        ), 1e3, this)
    }
    ))
}
$('a[href="#a"]').on("click", (function(e) {
    e.preventDefault()
}
)),
$((function() {
    function showExitPop() {
        "undefined" != typeof hideExitPop && !1 !== hideExitPop || ($("#exitpopup").css("left", window.innerWidth / 2 - $("#exitpopup").width() / 2),
        $("#exitpopup").css("top", window.innerHeight / 2 - $("#exitpopup").height() / 2),
        $("#exitpopup_bg").fadeIn(),
        $("#exitpopup").fadeIn())
    }
    "undefined" != typeof hideExitPop && !1 !== hideExitPop || (document.getElementsByTagName("html")[0].addEventListener("mouseleave", showExitPop, {
        once: !0
    }),
    document.addEventListener("reloadAssetData", (function(e) {
        document.getElementsByTagName("html")[0].addEventListener("mouseleave", showExitPop, {
            once: !0
        })
    }
    ))),
    $("#exitpopup_bg, .closeMe, #exitpopup a.btn-red, #exitpopup a.btn-blue, #exitpopup a.blue").on("click", (function(e) {
        if (e.preventDefault(),
        document.querySelector(".videoHolder")) {
            videojs("myPlayerId").paused() && $("#exitpopup_bg").fadeOut()
        } else
            $("#exitpopup_bg").fadeOut();
        $("#exitpopup").slideUp()
    }
    ));
    let running = !1;
    $(".store-form input, .store-country").on("change", (function(e) {
        running = !0,
        running && setTimeout((function() {
            0 === $("#zuora_payment").height() && ($(".store-country").trigger("focus"),
            $(".store-country").trigger("blur"))
        }
        ), 3e3),
        running = !1
    }
    ))
}
)),
$((function() {
    const videosJsReady = setInterval((function() {
        "function" == typeof videojs && "number" == typeof buttonTime && (clearInterval(videosJsReady),
        AutoAdvance(),
        ButtonReveal())
    }
    ), 100, this)
}
));
const blockButtonInt = setInterval((function() {
    clearInterval(blockButtonInt),
    "inline" == $(".btn-hidden").css("display") && $(".btn-hidden").css("display", "block"),
    clearInterval(blockButtonInt)
}
), 100);
function AutoAdvance() {
    const myPlayer = videojs("myPlayerId");
    myPlayer.ready((function() {
        myPlayer.on("ended", (function() {
            $(".store-next-page").click()
        }
        ))
    }
    ))
}
function timeJumper(timestamp) {
    const myPlayer = videojs("myPlayerId");
    myPlayer.ready((function() {
        myPlayer.currentTime(timestamp)
    }
    ))
}
$(".downbutton a").on("click", (function(event) {
    if ("" !== this.hash) {
        event.preventDefault();
        var hash = this.hash;
        $("html, body").animate({
            scrollTop: $(hash).offset().top
        }, 800, (function() {
            window.location.hash = hash
        }
        ))
    }
}
)),
/*!
 * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)
 * Copyright (c) 2016 Edson Hilios
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
function(factory) {
    "use strict";
    "function" == typeof define && define.amd ? define(["jquery"], factory) : factory(jQuery)
}((function($) {
    "use strict";
    var instances = []
      , matchers = []
      , defaultOptions = {
        precision: 100,
        elapse: !1,
        defer: !1
    };
    matchers.push(/^[0-9]*$/.source),
    matchers.push(/([0-9]{1,2}\/){2}[0-9]{4}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),
    matchers.push(/[0-9]{4}([\/\-][0-9]{1,2}){2}( [0-9]{1,2}(:[0-9]{2}){2})?/.source),
    matchers = new RegExp(matchers.join("|"));
    var DIRECTIVE_KEY_MAP = {
        Y: "years",
        m: "months",
        n: "daysToMonth",
        d: "daysToWeek",
        w: "weeks",
        W: "weeksToMonth",
        H: "hours",
        M: "minutes",
        S: "seconds",
        D: "totalDays",
        I: "totalHours",
        N: "totalMinutes",
        T: "totalSeconds"
    };
    function pluralize(format, count) {
        var plural = "s"
          , singular = "";
        return format && (1 === (format = format.replace(/(:|;|\s)/gi, "").split(/\,/)).length ? plural = format[0] : (singular = format[0],
        plural = format[1])),
        Math.abs(count) > 1 ? plural : singular
    }
    var Countdown = function(el, finalDate, options) {
        this.el = el,
        this.$el = $(el),
        this.interval = null,
        this.offset = {},
        this.options = $.extend({}, defaultOptions),
        this.instanceNumber = instances.length,
        instances.push(this),
        this.$el.data("countdown-instance", this.instanceNumber),
        options && ("function" == typeof options ? (this.$el.on("update.countdown", options),
        this.$el.on("stoped.countdown", options),
        this.$el.on("finish.countdown", options)) : this.options = $.extend({}, defaultOptions, options)),
        this.setFinalDate(finalDate),
        !1 === this.options.defer && this.start()
    };
    $.extend(Countdown.prototype, {
        start: function() {
            null !== this.interval && clearInterval(this.interval);
            var self = this;
            this.update(),
            this.interval = setInterval((function() {
                self.update.call(self)
            }
            ), this.options.precision)
        },
        stop: function() {
            clearInterval(this.interval),
            this.interval = null,
            this.dispatchEvent("stoped")
        },
        toggle: function() {
            this.interval ? this.stop() : this.start()
        },
        pause: function() {
            this.stop()
        },
        resume: function() {
            this.start()
        },
        remove: function() {
            this.stop.call(this),
            instances[this.instanceNumber] = null,
            delete this.$el.data().countdownInstance
        },
        setFinalDate: function(value) {
            this.finalDate = function(dateString) {
                if (dateString instanceof Date)
                    return dateString;
                if (String(dateString).match(matchers))
                    return String(dateString).match(/^[0-9]*$/) && (dateString = Number(dateString)),
                    String(dateString).match(/\-/) && (dateString = String(dateString).replace(/\-/g, "/")),
                    new Date(dateString);
                throw new Error("Couldn't cast `" + dateString + "` to a date object.")
            }(value)
        },
        update: function() {
            if (0 !== this.$el.closest("html").length) {
                var newTotalSecsLeft, hasEventsAttached = void 0 !== $._data(this.el, "events"), now = new Date;
                newTotalSecsLeft = this.finalDate.getTime() - now.getTime(),
                newTotalSecsLeft = Math.ceil(newTotalSecsLeft / 1e3),
                newTotalSecsLeft = !this.options.elapse && newTotalSecsLeft < 0 ? 0 : Math.abs(newTotalSecsLeft),
                this.totalSecsLeft !== newTotalSecsLeft && hasEventsAttached && (this.totalSecsLeft = newTotalSecsLeft,
                this.elapsed = now >= this.finalDate,
                this.offset = {
                    seconds: this.totalSecsLeft % 60,
                    minutes: Math.floor(this.totalSecsLeft / 60) % 60,
                    hours: Math.floor(this.totalSecsLeft / 60 / 60) % 24,
                    days: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                    daysToWeek: Math.floor(this.totalSecsLeft / 60 / 60 / 24) % 7,
                    daysToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 % 30.4368),
                    weeks: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7),
                    weeksToMonth: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 7) % 4,
                    months: Math.floor(this.totalSecsLeft / 60 / 60 / 24 / 30.4368),
                    years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                    totalDays: Math.floor(this.totalSecsLeft / 60 / 60 / 24),
                    totalHours: Math.floor(this.totalSecsLeft / 60 / 60),
                    totalMinutes: Math.floor(this.totalSecsLeft / 60),
                    totalSeconds: this.totalSecsLeft
                },
                this.options.elapse || 0 !== this.totalSecsLeft ? this.dispatchEvent("update") : (this.stop(),
                this.dispatchEvent("finish")))
            } else
                this.remove()
        },
        dispatchEvent: function(eventName) {
            var offsetObject, event = $.Event(eventName + ".countdown");
            event.finalDate = this.finalDate,
            event.elapsed = this.elapsed,
            event.offset = $.extend({}, this.offset),
            event.strftime = (offsetObject = this.offset,
            function(format) {
                var sanitize, directives = format.match(/%(-|!)?[A-Z]{1}(:[^;]+;)?/gi);
                if (directives)
                    for (var i = 0, len = directives.length; i < len; ++i) {
                        var directive = directives[i].match(/%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/)
                          , regexp = (sanitize = void 0,
                        sanitize = directive[0].toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1"),
                        new RegExp(sanitize))
                          , modifier = directive[1] || ""
                          , plural = directive[3] || ""
                          , value = null;
                        directive = directive[2],
                        DIRECTIVE_KEY_MAP.hasOwnProperty(directive) && (value = DIRECTIVE_KEY_MAP[directive],
                        value = Number(offsetObject[value])),
                        null !== value && ("!" === modifier && (value = pluralize(plural, value)),
                        "" === modifier && value < 10 && (value = "0" + value.toString()),
                        format = format.replace(regexp, value.toString()))
                    }
                return format.replace(/%%/, "%")
            }
            ),
            this.$el.trigger(event)
        }
    }),
    $.fn.countdown = function() {
        var argumentsArray = Array.prototype.slice.call(arguments, 0);
        return this.each((function() {
            var instanceNumber = $(this).data("countdown-instance");
            if (void 0 !== instanceNumber) {
                var instance = instances[instanceNumber]
                  , method = argumentsArray[0];
                Countdown.prototype.hasOwnProperty(method) ? instance[method].apply(instance, argumentsArray.slice(1)) : null === String(method).match(/^[$A-Z_][0-9A-Z_$]*$/i) ? (instance.setFinalDate.call(instance, method),
                instance.start()) : $.error("Method %s does not exist on jQuery.countdown".replace(/\%s/gi, method))
            } else
                new Countdown(this,argumentsArray[0],argumentsArray[1])
        }
        ))
    }
}
)),
$((function() {
    let stepCounter = 0
      , timerInterval = setInterval((function() {
        if ("undefined" != typeof showTimer && "undefined" != typeof countdownTime) {
            clearInterval(timerInterval);
            const showTimerTS = Date.parse(showTimer);
            if (Date.now() >= showTimerTS) {
                let style = document.createElement("style");
                style.innerHTML = "#runner-event div { padding-right: 6px }#runner-event div:last-child { padding-right: 0 }",
                document.head.appendChild(style);
                const oneDay = Date.parse(countdownTime) - Date.now();
                oneDay < 0 ? $(".countdown").hide() : $(".countdown").length > 0 && $(".countdown").children("#event-timer, #runner-event").countdown(countdownTime, (function(event) {
                    oneDay < 864e5 ? $(this).html(event.strftime("<div><span>%H</span> hour%!H</div><div><span>%M</span> minute%!M</div><div><span>%S</span> second%!S</div>")) : $(this).html(event.strftime("<div><span>%D</span> day%!D</div><div><span>%H</span> hour%!H</div><div><span>%M</span> minute%!M</div><div><span>%S</span> second%!S</div>")),
                    $(".countdown").show(),
                    $(this).show()
                }
                ))
            } else
                $(".countdown").hide()
        } else
            stepCounter >= 5 && clearInterval(timerInterval),
            $(".countdown").hide(),
            stepCounter++
    }
    ), 200)
}
));
